// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProEvents.Infrastructure.Contexts;

namespace ProEvents.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("ProEvents.Domain.Entities.Batch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EventId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId1");

                    b.ToTable("Batchs");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.EventSpeaker", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EventId1")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SpeakerId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("EventId1");

                    b.HasIndex("SpeakerId1");

                    b.ToTable("EventsSpeakers");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EventId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SpeakerId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId1");

                    b.HasIndex("SpeakerId1");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.Speaker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiniCurriculum")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.Batch", b =>
                {
                    b.HasOne("ProEvents.Domain.Entities.Event", "Event")
                        .WithMany("Batchs")
                        .HasForeignKey("EventId1");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.EventSpeaker", b =>
                {
                    b.HasOne("ProEvents.Domain.Entities.Event", "Event")
                        .WithMany("EventSpeakers")
                        .HasForeignKey("EventId1");

                    b.HasOne("ProEvents.Domain.Entities.Speaker", "Speaker")
                        .WithMany("Events")
                        .HasForeignKey("SpeakerId1");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.SocialMedia", b =>
                {
                    b.HasOne("ProEvents.Domain.Entities.Event", "Event")
                        .WithMany("SocialMedias")
                        .HasForeignKey("EventId1");

                    b.HasOne("ProEvents.Domain.Entities.Speaker", "Speaker")
                        .WithMany("SocialMedias")
                        .HasForeignKey("SpeakerId1");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.Event", b =>
                {
                    b.Navigation("Batchs");

                    b.Navigation("EventSpeakers");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("ProEvents.Domain.Entities.Speaker", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
